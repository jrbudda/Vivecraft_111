--- a/shadersmod/client/Shaders.java
+++ b/shadersmod/client/Shaders.java
@@ -29,6 +29,7 @@
 import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
 import net.minecraft.client.Minecraft;
+import net.minecraft.client.Minecraft.renderPass;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelRenderer;
 import net.minecraft.client.renderer.EntityRenderer;
@@ -207,7 +208,7 @@
     static int usedShadowDepthBuffers = 0;
     static int usedColorAttachs = 0;
     static int usedDrawBuffers = 0;
-    static int dfb = 0;
+    public static int dfb = 0;
     static int sfb = 0;
     private static int[] gbuffersFormat = new int[8];
     private static boolean[] gbuffersClear = new boolean[8];
@@ -376,10 +377,10 @@
     static final FloatBuffer tempMatrixDirectBuffer = nextFloatBuffer(16);
     static final FloatBuffer tempDirectFloatBuffer = nextFloatBuffer(16);
     static final IntBuffer dfbColorTextures = nextIntBuffer(16);
-    static final IntBuffer dfbDepthTextures = nextIntBuffer(3);
+    public static final IntBuffer dfbDepthTextures = nextIntBuffer(3);
     static final IntBuffer sfbColorTextures = nextIntBuffer(8);
     static final IntBuffer sfbDepthTextures = nextIntBuffer(2);
-    static final IntBuffer dfbDrawBuffers = nextIntBuffer(8);
+        static final IntBuffer dfbDrawBuffers = nextIntBuffer(8);
     static final IntBuffer sfbDrawBuffers = nextIntBuffer(8);
     static final IntBuffer drawBuffersNone = nextIntBuffer(8);
     static final IntBuffer drawBuffersAll = nextIntBuffer(8);
@@ -717,11 +718,11 @@
             flag2 = true;
         }
 
-        if (Config.isFastRender())
-        {
-            SMCLog.info("Shaders can not be loaded, Fast Render is enabled.");
-            flag2 = true;
-        }
+//        if (Config.isFastRender())
+//        {
+//            SMCLog.info("Shaders can not be loaded, Fast Render is enabled.");
+//            flag2 = true;
+//        }
 
         String s = shadersConfig.getProperty(EnumShaderOption.SHADER_PACK.getPropertyKey(), packNameDefault);
 
@@ -1550,11 +1551,10 @@
         SMCLog.info(stringbuilder.toString());
     }
 
-    public static void startup(Minecraft mc)
+    public static void startup(Minecraft mcin)
     {
         checkShadersModInstalled();
-        mc = mc;
-        mc = Minecraft.getMinecraft();
+        mc = mcin;
         capabilities = GLContext.getCapabilities();
         glVersionString = GL11.glGetString(GL11.GL_VERSION);
         glVendorString = GL11.glGetString(GL11.GL_VENDOR);
@@ -3207,14 +3207,14 @@
                 programsDrawBuffers[i] = null;
                 programsCompositeMipmapSetting[i] = 0;
             }
-
+           
             if (dfb != 0)
             {
                 EXTFramebufferObject.glDeleteFramebuffersEXT(dfb);
                 dfb = 0;
-                checkGLError("del dfb");
+                checkGLError("del dfbR");
             }
-
+            
             if (sfb != 0)
             {
                 EXTFramebufferObject.glDeleteFramebuffersEXT(sfb);
@@ -3281,11 +3281,12 @@
 
     private static void resize()
     {
-        renderDisplayWidth = mc.displayWidth;
-        renderDisplayHeight = mc.displayHeight;
-        renderWidth = Math.round((float)renderDisplayWidth * configRenderResMul);
-        renderHeight = Math.round((float)renderDisplayHeight * configRenderResMul);
-        setupFrameBuffer();
+        renderDisplayWidth = mc.displayFBWidth;
+        renderDisplayHeight = mc.displayFBHeight;
+        // VIVE: NO! Doing scaling here breaks everything! We have our own scaled rendering so this is unnecessary.
+        renderWidth = renderDisplayWidth; //Math.round((float)renderDisplayWidth * configRenderResMul);
+        renderHeight = renderDisplayHeight; //Math.round((float)renderDisplayHeight * configRenderResMul);
+        dfb = setupFrameBuffer(dfb, renderWidth, renderHeight);
     }
 
     private static void resizeShadow()
@@ -3293,25 +3294,25 @@
         needResizeShadow = false;
         shadowMapWidth = Math.round((float)spShadowMapWidth * configShadowResMul);
         shadowMapHeight = Math.round((float)spShadowMapHeight * configShadowResMul);
-        setupShadowFrameBuffer();
+        sfb = setupShadowFrameBuffer(sfb, shadowMapHeight, shadowMapWidth);
     }
 
-    private static void setupFrameBuffer()
+    private static int setupFrameBuffer(int id, int w, int h)
     {
-        if (dfb != 0)
+        if (id != 0)
         {
-            EXTFramebufferObject.glDeleteFramebuffersEXT(dfb);
+            EXTFramebufferObject.glDeleteFramebuffersEXT(id);
             GlStateManager.deleteTextures(dfbDepthTextures);
             GlStateManager.deleteTextures(dfbColorTextures);
         }
 
-        dfb = EXTFramebufferObject.glGenFramebuffersEXT();
+        id = EXTFramebufferObject.glGenFramebuffersEXT();
         GL11.glGenTextures((IntBuffer)dfbDepthTextures.clear().limit(usedDepthBuffers));
         GL11.glGenTextures((IntBuffer)dfbColorTextures.clear().limit(16));
         dfbDepthTextures.position(0);
         dfbColorTextures.position(0);
         dfbColorTextures.get(dfbColorTexturesA).position(0);
-        EXTFramebufferObject.glBindFramebufferEXT(36160, dfb);
+        EXTFramebufferObject.glBindFramebufferEXT(36160, id);
         GL20.glDrawBuffers(0);
         GL11.glReadBuffer(0);
 
@@ -3323,10 +3324,18 @@
             GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_NEAREST);
             GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_NEAREST);
             GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL14.GL_DEPTH_TEXTURE_MODE, GL11.GL_LUMINANCE);
-            GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_DEPTH_COMPONENT, renderWidth, renderHeight, 0, GL11.GL_DEPTH_COMPONENT, GL11.GL_FLOAT, (FloatBuffer)((FloatBuffer)null));
+            GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL30.GL_DEPTH24_STENCIL8, w, h, 0, GL30.GL_DEPTH_STENCIL, GL30.GL_UNSIGNED_INT_24_8, (FloatBuffer)(null));
         }
+        
+        dfbDepthTextures.position(0);
+        GlStateManager.bindTexture(0);
+        EXTFramebufferObject.glFramebufferTexture2DEXT(GL30.GL_FRAMEBUFFER, GL30.GL_DEPTH_STENCIL_ATTACHMENT, GL11.GL_TEXTURE_2D, dfbDepthTextures.get(0), 0);
+
+		int ok = GL30.glCheckFramebufferStatus(GL30.GL_FRAMEBUFFER);
+		System.out.println("hack stencil into SMC " + id  + " " +ok);
+		mc.checkGLError("hack smc stencil");
+        //VIVECRAFT ADD STENCIL
 
-        EXTFramebufferObject.glFramebufferTexture2DEXT(36160, 36096, 3553, dfbDepthTextures.get(0), 0);
         GL20.glDrawBuffers(dfbDrawBuffers);
         GL11.glReadBuffer(0);
         checkGLError("FT d");
@@ -3338,7 +3347,7 @@
             GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_T, GL11.GL_CLAMP);
             GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);
             GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
-            GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, gbuffersFormat[k], renderWidth, renderHeight, 0, GL12.GL_BGRA, GL12.GL_UNSIGNED_INT_8_8_8_8_REV, (ByteBuffer)((ByteBuffer)null));
+            GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, gbuffersFormat[k], w, h, 0, GL12.GL_BGRA, GL12.GL_UNSIGNED_INT_8_8_8_8_REV, (ByteBuffer)((ByteBuffer)null));
             EXTFramebufferObject.glFramebufferTexture2DEXT(36160, 36064 + k, 3553, dfbColorTexturesA[k], 0);
             checkGLError("FT c");
         }
@@ -3350,10 +3359,10 @@
             GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_T, GL11.GL_CLAMP);
             GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);
             GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
-            GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, gbuffersFormat[l], renderWidth, renderHeight, 0, GL12.GL_BGRA, GL12.GL_UNSIGNED_INT_8_8_8_8_REV, (ByteBuffer)((ByteBuffer)null));
+            GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, gbuffersFormat[l], w, h, 0, GL12.GL_BGRA, GL12.GL_UNSIGNED_INT_8_8_8_8_REV, (ByteBuffer)((ByteBuffer)null));
             checkGLError("FT ca");
         }
-
+        
         int i1 = EXTFramebufferObject.glCheckFramebufferStatusEXT(36160);
 
         if (i1 == 36058)
@@ -3363,7 +3372,7 @@
             for (int j = 0; j < usedColorBuffers; ++j)
             {
                 GlStateManager.bindTexture(dfbColorTextures.get(j));
-                GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_RGBA, renderWidth, renderHeight, 0, GL12.GL_BGRA, GL12.GL_UNSIGNED_INT_8_8_8_8_REV, (ByteBuffer)((ByteBuffer)null));
+                GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_RGBA, w, h, 0, GL12.GL_BGRA, GL12.GL_UNSIGNED_INT_8_8_8_8_REV, (ByteBuffer)((ByteBuffer)null));
                 EXTFramebufferObject.glFramebufferTexture2DEXT(36160, 36064 + j, 3553, dfbColorTextures.get(j), 0);
                 checkGLError("FT c");
             }
@@ -3384,23 +3393,25 @@
         }
         else
         {
-            SMCLog.info("Framebuffer created.");
+            SMCLog.info("Framebuffer created." + id + ": " + w + " " + h + " " + i1);
         }
+        return id;
+        
     }
 
-    private static void setupShadowFrameBuffer()
+    private static int setupShadowFrameBuffer(int id, int w, int h)
     {
         if (usedShadowDepthBuffers != 0)
         {
-            if (sfb != 0)
+            if (id != 0)
             {
-                EXTFramebufferObject.glDeleteFramebuffersEXT(sfb);
+                EXTFramebufferObject.glDeleteFramebuffersEXT(id);
                 GlStateManager.deleteTextures(sfbDepthTextures);
                 GlStateManager.deleteTextures(sfbColorTextures);
             }
 
-            sfb = EXTFramebufferObject.glGenFramebuffersEXT();
-            EXTFramebufferObject.glBindFramebufferEXT(36160, sfb);
+            id = EXTFramebufferObject.glGenFramebuffersEXT();
+            EXTFramebufferObject.glBindFramebufferEXT(36160, id);
             GL11.glDrawBuffer(0);
             GL11.glReadBuffer(0);
             GL11.glGenTextures((IntBuffer)sfbDepthTextures.clear().limit(usedShadowDepthBuffers));
@@ -3422,7 +3433,7 @@
                     GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL14.GL_TEXTURE_COMPARE_MODE, GL14.GL_COMPARE_R_TO_TEXTURE);
                 }
 
-                GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_DEPTH_COMPONENT, shadowMapWidth, shadowMapHeight, 0, GL11.GL_DEPTH_COMPONENT, GL11.GL_FLOAT, (FloatBuffer)((FloatBuffer)null));
+                GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_DEPTH_COMPONENT, w, h, 0, GL11.GL_DEPTH_COMPONENT, GL11.GL_FLOAT, (FloatBuffer)((FloatBuffer)null));
             }
 
             EXTFramebufferObject.glFramebufferTexture2DEXT(36160, 36096, 3553, sfbDepthTextures.get(0), 0);
@@ -3436,7 +3447,7 @@
                 int i1 = shadowColorFilterNearest[k] ? 9728 : 9729;
                 GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, i1);
                 GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, i1);
-                GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_RGBA, shadowMapWidth, shadowMapHeight, 0, GL12.GL_BGRA, GL12.GL_UNSIGNED_INT_8_8_8_8_REV, (ByteBuffer)((ByteBuffer)null));
+                GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_RGBA, w, h, 0, GL12.GL_BGRA, GL12.GL_UNSIGNED_INT_8_8_8_8_REV, (ByteBuffer)((ByteBuffer)null));
                 EXTFramebufferObject.glFramebufferTexture2DEXT(36160, 36064 + k, 3553, sfbColorTextures.get(k), 0);
                 checkGLError("FT sc");
             }
@@ -3459,6 +3470,8 @@
                 SMCLog.info("Shadow framebuffer created.");
             }
         }
+        
+        return id;
     }
 
     public static void beginRender(Minecraft minecraft, float partialTicks, long finishTimeNano)
@@ -3487,10 +3500,23 @@
             }
         }
 
-        if (mc.displayWidth != renderDisplayWidth || mc.displayHeight != renderDisplayHeight)
-        {
-            resize();
-        }
+        if(mc.reinitflag || (mc.displayFBWidth != renderDisplayWidth || mc.displayFBHeight != renderDisplayHeight)){
+        	resize();
+        	mc.reinitflag = false;
+        }
+        
+        //Vive use right sizes and buffers
+//        if(mc.currentPass == renderPass.Center){
+//        	dfb = dfbU;
+//        	renderWidth = Math.round(mc.mirrorFBWidth * configRenderResMul);
+//        	renderHeight = Math.round(mc.mirrorFBHeight * configRenderResMul);
+//        }else{
+        //NOPE!
+//        	dfb = dfbR;
+//        	renderWidth = Math.round(mc.displayFBWidth * configRenderResMul);
+//        	renderHeight = Math.round(mc.displayFBHeight * configRenderResMul);
+//        }
+        
 
         if (needResizeShadow)
         {
@@ -3543,18 +3569,21 @@
             eyeBrightnessFadeY = eyeBrightnessFadeY * f2 + (float)(eyeBrightness >> 16) * (1.0F - f2);
             isEyeInWater = 0;
 
-            if (mc.gameSettings.thirdPersonView == 0 && !isSleeping)
-            {
-                if (entity.isInsideOfMaterial(Material.WATER))
-                {
-                    isEyeInWater = 1;
-                }
-                else if (entity.isInsideOfMaterial(Material.LAVA))
-                {
-                    isEyeInWater = 2;
-                }
-            }
-
+//            if (mc.gameSettings.thirdPersonView == 0 && !isSleeping)
+//            {
+//                if (entity.isInsideOfMaterial(Material.WATER))
+//                {
+//                    isEyeInWater = 1;
+//                }
+//                else if (entity.isInsideOfMaterial(Material.LAVA))
+//                {
+//                    isEyeInWater = 2;
+//                }
+//            }
+
+            //VIVE use my method its better.
+            isEyeInWater = mc.gameSettings.thirdPersonView == 0 && !isSleeping && mc.getItemRenderer().isInsideOfMaterial(mc.entityRenderer.getEyeRenderPos(mc.currentPass),Material.WATER) ? 1 : 0;
+            
             if (mc.player != null)
             {
                 nightVision = 0.0F;
@@ -3572,6 +3601,7 @@
                     blindness = Config.limit((float)i / 20.0F, 0.0F, 1.0F);
                 }
             }
+            
 
             Vec3d vec3d = mc.world.getSkyColor(entity, partialTicks);
             vec3d = CustomColors.getWorldSkyColor(vec3d, currentWorld, entity, partialTicks);
@@ -3587,6 +3617,7 @@
         skipRenderHandMain = false;
         skipRenderHandOff = false;
 
+                
         if (usedShadowDepthBuffers >= 1)
         {
             GlStateManager.setActiveTexture(33988);
@@ -3679,16 +3710,15 @@
         checkGLError("end beginRender");
     }
 
-    private static void checkWorldChanged(World worldin)
+    private static void checkWorldChanged(World world)
     {
-        if (currentWorld != worldin)
+        if (currentWorld != world)
         {
-            currentWorld = worldin;
-
-            if (currentWorld != null && worldin != null)
+ 
+            if (world != null && currentWorld != null)
             {
-                int i = worldin.provider.getDimensionType().getId();
-                int j = worldin.provider.getDimensionType().getId();
+                int i = world.provider.getDimensionType().getId();
+                int j = currentWorld.provider.getDimensionType().getId();
                 boolean flag = shaderPackDimensions.contains(Integer.valueOf(i));
                 boolean flag1 = shaderPackDimensions.contains(Integer.valueOf(j));
 
@@ -3697,6 +3727,7 @@
                     uninit();
                 }
             }
+            currentWorld = world;
         }
     }
 
@@ -3705,7 +3736,7 @@
         if (!isShadowPass)
         {
             EXTFramebufferObject.glBindFramebufferEXT(36160, dfb);
-            GL11.glViewport(0, 0, renderWidth, renderHeight);
+            GlStateManager.viewport(0, 0, renderWidth, renderHeight);
             activeDrawBuffers = null;
             ShadersTex.bindNSTextures(defaultTexture.getMultiTexID());
             useProgram(2);
@@ -3719,12 +3750,12 @@
 
         if (isShadowPass)
         {
-            GL11.glViewport(0, 0, shadowMapWidth, shadowMapHeight);
+        	GlStateManager.viewport(0, 0, shadowMapWidth, shadowMapHeight);
         }
         else
         {
-            GL11.glViewport(0, 0, renderWidth, renderHeight);
             EXTFramebufferObject.glBindFramebufferEXT(36160, dfb);
+        	GL11.glViewport(vx, vy, vw, vh);
             isRenderingDfb = true;
             GlStateManager.enableCull();
             GlStateManager.enableDepth();
@@ -3761,10 +3792,10 @@
         {
             checkGLError("shadow clear pre");
             EXTFramebufferObject.glFramebufferTexture2DEXT(36160, 36096, 3553, sfbDepthTextures.get(0), 0);
-            GL11.glClearColor(1.0F, 1.0F, 1.0F, 1.0F);
+            GlStateManager.clearColor(1.0F, 1.0F, 1.0F, 1.0F);
             GL20.glDrawBuffers(programsDrawBuffers[30]);
             checkFramebufferStatus("shadow clear");
-            GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
+            GlStateManager.clear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
             checkGLError("shadow clear");
         }
         else
@@ -3780,7 +3811,7 @@
             if (gbuffersClear[1])
             {
                 GL20.glDrawBuffers(36065);
-                GL11.glClearColor(1.0F, 1.0F, 1.0F, 1.0F);
+                GlStateManager.clearColor(1.0F, 1.0F, 1.0F, 1.0F);
                 GL11.glClear(16384);
             }
 
@@ -3789,7 +3820,7 @@
                 if (gbuffersClear[i])
                 {
                     GL20.glDrawBuffers(36064 + i);
-                    GL11.glClearColor(0.0F, 0.0F, 0.0F, 0.0F);
+                    GlStateManager.clearColor(0.0F, 0.0F, 0.0F, 0.0F);
                     GL11.glClear(16384);
                 }
             }
@@ -3971,7 +4002,7 @@
 
     public static void drawComposite()
     {
-        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+        GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
         GL11.glBegin(GL11.GL_QUADS);
         GL11.glTexCoord2f(0.0F, 0.0F);
         GL11.glVertex3f(0.0F, 0.0F, 0.0F);
@@ -3995,7 +4026,7 @@
             GL11.glPushMatrix();
             GL11.glLoadIdentity();
             GL11.glOrtho(0.0D, 1.0D, 0.0D, 1.0D, 0.0D, 1.0D);
-            GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+            GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
             GlStateManager.enableTexture2D();
             GlStateManager.disableAlpha();
             GlStateManager.disableBlend();
@@ -4100,7 +4131,7 @@
             isRenderingDfb = false;
             mc.getFramebuffer().bindFramebuffer(true);
             OpenGlHelper.glFramebufferTexture2D(OpenGlHelper.GL_FRAMEBUFFER, OpenGlHelper.GL_COLOR_ATTACHMENT0, 3553, mc.getFramebuffer().framebufferTexture, 0);
-            GL11.glViewport(0, 0, mc.displayWidth, mc.displayHeight);
+            // the bind does this for you.  GlStateManager.viewport(0, 0, renderWidth, renderHeight);
 
             if (EntityRenderer.anaglyphEnable)
             {
@@ -4109,9 +4140,9 @@
             }
 
             GlStateManager.depthMask(true);
-            GL11.glClearColor(clearColorR, clearColorG, clearColorB, 1.0F);
-            GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
-            GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+            GlStateManager.clearColor(clearColorR, clearColorG, clearColorB, 1.0F);
+            GlStateManager.clear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
+            GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
             GlStateManager.enableTexture2D();
             GlStateManager.disableAlpha();
             GlStateManager.disableBlend();
@@ -4230,9 +4261,9 @@
     public static void preSkyList()
     {
         setUpPosition();
-        GL11.glColor3f(fogColorR, fogColorG, fogColorB);
+        GlStateManager.color(fogColorR, fogColorG, fogColorB);
         drawHorizon();
-        GL11.glColor3f(skyColorR, skyColorG, skyColorB);
+        GlStateManager.color(skyColorR, skyColorG, skyColorB);
     }
 
     public static void endSky()
@@ -4575,7 +4606,8 @@
     public static void endFPOverlay()
     {
     }
-
+    
+//unused
     public static void glEnableWrapper(int cap)
     {
         GL11.glEnable(cap);
@@ -4590,6 +4622,7 @@
         }
     }
 
+    //unused
     public static void glDisableWrapper(int cap)
     {
         GL11.glDisable(cap);
@@ -4848,7 +4881,7 @@
 
                         for (Object s7 : properties.keySet())
                         {
-                        	String s4 = (String) s7;
+                        	String s4 = (String)s7;
                             String s5 = properties.getProperty(s4);
                             shaderPackResources.put(s4, s5);
                         }
