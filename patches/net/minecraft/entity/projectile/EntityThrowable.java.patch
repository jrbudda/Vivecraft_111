--- a/net/minecraft/entity/projectile/EntityThrowable.java
+++ b/net/minecraft/entity/projectile/EntityThrowable.java
@@ -4,12 +4,14 @@
 import java.util.UUID;
 import javax.annotation.Nullable;
 import net.minecraft.block.Block;
+import net.minecraft.client.Minecraft;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.IProjectile;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.init.Blocks;
 import net.minecraft.nbt.NBTTagCompound;
+import net.minecraft.src.Reflector;
 import net.minecraft.util.EnumParticleTypes;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.datafix.DataFixer;
@@ -50,12 +52,22 @@
     public EntityThrowable(World worldIn, double x, double y, double z)
     {
         this(worldIn);
-        this.setPosition(x, y, z);
+
+    	//VIVE SET SPAWNPOS
+        if (this.thrower.getEntityId() == Minecraft.getMinecraft().player.getEntityId())
+        {
+	        Vec3d aimSource = Minecraft.getMinecraft().roomScale.getControllerPos_World(0);
+	        this.setPosition(aimSource.xCoord, aimSource.yCoord, aimSource.zCoord);
+        } else 
+	        this.setPosition(x, y, z);
+        ///
     }
 
     public EntityThrowable(World worldIn, EntityLivingBase throwerIn)
     {
         this(worldIn, throwerIn.posX, throwerIn.posY + (double)throwerIn.getEyeHeight() - 0.10000000149011612D, throwerIn.posZ);
+
+       
         this.thrower = throwerIn;
     }
 
@@ -84,6 +96,14 @@
      */
     public void setHeadingFromThrower(Entity entityThrower, float rotationPitchIn, float rotationYawIn, float pitchOffset, float velocity, float inaccuracy)
     {
+    	//VIVE USE CONTROLLER
+        if (entityThrower.getEntityId() == Minecraft.getMinecraft().player.getEntityId())
+        {
+        	rotationYawIn = Minecraft.getMinecraft().roomScale.getControllerYaw_World(0);
+        	rotationPitchIn = -Minecraft.getMinecraft().roomScale.getControllerPitch_World(0);
+        }
+        //END VIVE
+        
         float f = -MathHelper.sin(rotationYawIn * 0.017453292F) * MathHelper.cos(rotationPitchIn * 0.017453292F);
         float f1 = -MathHelper.sin((rotationPitchIn + pitchOffset) * 0.017453292F);
         float f2 = MathHelper.cos(rotationYawIn * 0.017453292F) * MathHelper.cos(rotationPitchIn * 0.017453292F);
@@ -259,7 +279,8 @@
             }
             else
             {
-                this.onImpact(raytraceresult);
+            	if(!Reflector.ForgeHooks_onThrowableImpact.exists() || !Reflector.callBoolean(Reflector.ForgeHooks_onThrowableImpact, new Object[]{this, raytraceresult}))
+            		this.onImpact(raytraceresult);
             }
         }
 
