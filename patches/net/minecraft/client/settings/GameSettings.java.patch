--- a/net/minecraft/client/settings/GameSettings.java
+++ b/net/minecraft/client/settings/GameSettings.java
@@ -107,7 +107,7 @@
     public float chatOpacity = 1.0F;
     public boolean snooperEnabled = true;
     public boolean fullScreen;
-    public boolean enableVsync = true;
+    public boolean enableVsync = false;
     public boolean useVbo = true;
     public boolean reducedDebugInfo;
     public boolean hideServerAddress;
@@ -217,7 +217,7 @@
     public boolean ofStars = true;
     public boolean ofSunMoon = true;
     public int ofVignette = 0;
-    public int ofChunkUpdates = 1;
+    public int ofChunkUpdates = 5;
     public boolean ofChunkUpdatesDynamic = false;
     public int ofTime = 0;
     public boolean ofClearWater = false;
@@ -417,7 +417,7 @@
                 this.mc.getTextureMapBlocks().setMipmapLevels(this.mipmapLevels);
                 this.mc.getTextureManager().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
                 this.mc.getTextureMapBlocks().setBlurMipmapDirect(false, this.mipmapLevels > 0);
-                this.mc.scheduleResourcesRefresh();
+                this.needsResourceRefresh = true; // FORGE: fix for MC-64581 very laggy mipmap slider
             }
         }
 
@@ -1218,9 +1218,9 @@
     {
         if (Reflector.FMLClientHandler.exists())
         {
-            Object object = Reflector.call(Reflector.FMLClientHandler_instance, new Object[0]);
+            Object object = Reflector.call(Reflector.FMLClientHandler_instance);
 
-            if (object != null && Reflector.callBoolean(object, Reflector.FMLClientHandler_isLoading, new Object[0]))
+            if (object != null && Reflector.callBoolean(object, Reflector.FMLClientHandler_isLoading))
             {
                 return;
             }
@@ -1304,7 +1304,7 @@
                 if (Reflector.ForgeKeyBinding_getKeyModifier.exists())
                 {
                     String s = "key_" + keybinding.getKeyDescription() + ":" + keybinding.getKeyCode();
-                    Object object1 = Reflector.call(keybinding, Reflector.ForgeKeyBinding_getKeyModifier, new Object[0]);
+                    Object object1 = Reflector.call(keybinding, Reflector.ForgeKeyBinding_getKeyModifier);
                     Object object2 = Reflector.getFieldValue(Reflector.KeyModifier_NONE);
                     printwriter.println(object1 != object2 ? s + ":" + object1 : s);
                 }
@@ -1818,7 +1818,7 @@
         {
             ++this.ofChunkUpdates;
 
-            if (this.ofChunkUpdates > 5)
+            if (this.ofChunkUpdates > 15)
             {
                 this.ofChunkUpdates = 1;
             }
@@ -1922,18 +1922,18 @@
 
         if (p_setOptionValueOF_1_ == GameSettings.Options.FAST_RENDER)
         {
-            if (!this.ofFastRender && Config.isShaders())
-            {
-                Config.showGuiMessage(Lang.get("of.message.fr.shaders1"), Lang.get("of.message.fr.shaders2"));
-                return;
-            }
+//            if (!this.ofFastRender && Config.isShaders())
+//            {
+//                Config.showGuiMessage(Lang.get("of.message.fr.shaders1"), Lang.get("of.message.fr.shaders2"));
+//                return;
+//            }
 
             this.ofFastRender = !this.ofFastRender;
 
-            if (this.ofFastRender)
-            {
-                this.mc.entityRenderer.stopUseShader();
-            }
+//            if (this.ofFastRender)
+//            {
+//                this.mc.entityRenderer.stopUseShader();
+//            }
 
             Config.updateFramebufferSize();
         }
@@ -2733,7 +2733,7 @@
                     if (astring[0].equals("ofChunkUpdates") && astring.length >= 2)
                     {
                         this.ofChunkUpdates = Integer.valueOf(astring[1]).intValue();
-                        this.ofChunkUpdates = Config.limit(this.ofChunkUpdates, 1, 5);
+                        this.ofChunkUpdates = Config.limit(this.ofChunkUpdates, 1, 15);
                     }
 
                     if (astring[0].equals("ofChunkUpdatesDynamic") && astring.length >= 2)
@@ -3023,7 +3023,7 @@
         this.guiScale = 0;
         this.particleSetting = 0;
         this.heldItemTooltips = true;
-        this.useVbo = false;
+        this.useVbo = true;
         this.forceUnicodeFont = false;
         this.ofFogType = 1;
         this.ofFogStart = 0.8F;
@@ -3034,7 +3034,7 @@
         this.ofSmoothWorld = Config.isSingleProcessor();
         this.ofLazyChunkLoading = Config.isSingleProcessor();
         this.ofFastMath = false;
-        this.ofFastRender = false;
+        this.ofFastRender = true;
         this.ofTranslucentBlocks = 0;
         this.ofDynamicFov = true;
         this.ofAlternateBlocks = true;
@@ -3058,7 +3058,7 @@
         this.ofStars = true;
         this.ofSunMoon = true;
         this.ofVignette = 0;
-        this.ofChunkUpdates = 1;
+        this.ofChunkUpdates = 5;
         this.ofChunkUpdatesDynamic = false;
         this.ofTime = 0;
         this.ofClearWater = false;
@@ -3203,6 +3203,7 @@
         }
     }
 
+    //FORGE
     public void onGuiClosed()
     {
         if (this.needsResourceRefresh)
@@ -3211,6 +3212,7 @@
             this.needsResourceRefresh = false;
         }
     }
+    ////
 
     public static enum Options
     {
