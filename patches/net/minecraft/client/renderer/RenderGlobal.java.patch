--- a/net/minecraft/client/renderer/RenderGlobal.java
+++ b/net/minecraft/client/renderer/RenderGlobal.java
@@ -4,7 +4,10 @@
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.google.gson.JsonSyntaxException;
+import com.mtbs3d.minecrift.provider.MCOpenVR;
+
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
+
 import java.io.IOException;
 import java.util.ArrayDeque;
 import java.util.ArrayList;
@@ -19,7 +22,9 @@
 import java.util.Map;
 import java.util.Random;
 import java.util.Set;
+
 import javax.annotation.Nullable;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockChest;
 import net.minecraft.block.BlockEnderChest;
@@ -104,11 +109,13 @@
 import net.minecraft.world.border.WorldBorder;
 import net.minecraft.world.chunk.Chunk;
 import net.minecraft.world.chunk.IChunkProvider;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.lwjgl.input.Keyboard;
 import org.lwjgl.util.vector.Vector3f;
 import org.lwjgl.util.vector.Vector4f;
+
 import shadersmod.client.Shaders;
 import shadersmod.client.ShadersRender;
 import shadersmod.client.ShadowUtils;
@@ -198,10 +205,10 @@
     private final Set<BlockPos> setLightUpdates = Sets.<BlockPos>newHashSet();
     private CloudRenderer cloudRenderer;
     public Entity renderedEntity;
-    public Set chunksToResortTransparency = new LinkedHashSet();
-    public Set chunksToUpdateForced = new LinkedHashSet();
+    //public Set chunksToResortTransparency = new LinkedHashSet();
+    //public Set chunksToUpdateForced = new LinkedHashSet();
     private Deque visibilityDeque = new ArrayDeque();
-    private List<ContainerLocalRenderInformation> renderInfosEntities = new ArrayList(1024);
+    private List<ContainerLocalRenderInformation> renderInfosEntities = new ArrayList<ContainerLocalRenderInformation>(1024);
     private List<ContainerLocalRenderInformation> renderInfosTileEntities = new ArrayList(1024);
     private List renderInfosNormal = new ArrayList(1024);
     private List renderInfosEntitiesNormal = new ArrayList(1024);
@@ -394,7 +401,7 @@
         }
     }
 
-    private void renderSky(VertexBuffer worldRendererIn, float posY, boolean reverseX)
+    public void renderSky(VertexBuffer worldRendererIn, float posY, boolean reverseX)
     {
         int i = 64;
         int j = 6;
@@ -457,7 +464,7 @@
         }
     }
 
-    private void renderStars(VertexBuffer worldRendererIn)
+    public void renderStars(VertexBuffer worldRendererIn)
     {
         Random random = new Random(10842L);
         worldRendererIn.begin(7, DefaultVertexFormats.POSITION);
@@ -651,7 +658,7 @@
 
         if (Reflector.MinecraftForgeClient_getRenderPass.exists())
         {
-            i = Reflector.callInt(Reflector.MinecraftForgeClient_getRenderPass, new Object[0]);
+            i = Reflector.callInt(Reflector.MinecraftForgeClient_getRenderPass);
         }
 
         if (this.renderEntitiesStartupCounter > 0)
@@ -751,6 +758,8 @@
                             {
                                 boolean flag3 = this.mc.getRenderViewEntity() instanceof EntityLivingBase ? ((EntityLivingBase)this.mc.getRenderViewEntity()).isPlayerSleeping() : false;
 
+                                flag3 =false; //VIVE -wat is this.
+                                
                                 if ((entity2 != this.mc.getRenderViewEntity() || this.mc.gameSettings.thirdPersonView != 0 || flag3) && (entity2.posY < 0.0D || entity2.posY >= 256.0D || this.world.isBlockLoaded(blockpos$pooledmutableblockpos.setPos(entity2))))
                                 {
                                     ++this.countEntitiesRendered;
@@ -927,7 +936,7 @@
 
                             if (Reflector.callBoolean(tileentity1, Reflector.ForgeTileEntity_shouldRenderInPass, new Object[] {Integer.valueOf(i)}))
                             {
-                                AxisAlignedBB axisalignedbb = (AxisAlignedBB)Reflector.call(tileentity1, Reflector.ForgeTileEntity_getRenderBoundingBox, new Object[0]);
+                                AxisAlignedBB axisalignedbb = (AxisAlignedBB)Reflector.call(tileentity1, Reflector.ForgeTileEntity_getRenderBoundingBox);
 
                                 if (axisalignedbb == null || camera.isBoundingBoxInFrustum(axisalignedbb))
                                 {
@@ -1114,10 +1123,12 @@
         }
 
         this.mc.mcProfiler.endStartSection("culling");
-        BlockPos blockpos1 = new BlockPos(d3, d4 + (double)viewEntity.getEyeHeight(), d5);
+        //VIVE NO EYEHEIGHT
+        BlockPos blockpos1 = new BlockPos(d3, d4, d5);
         RenderChunk renderchunk = this.viewFrustum.getRenderChunk(blockpos1);
         new BlockPos(MathHelper.floor(d3 / 16.0D) * 16, MathHelper.floor(d4 / 16.0D) * 16, MathHelper.floor(d5 / 16.0D) * 16);
-        this.displayListEntitiesDirty = this.displayListEntitiesDirty || !this.chunksToUpdate.isEmpty() || viewEntity.posX != this.lastViewEntityX || viewEntity.posY != this.lastViewEntityY || viewEntity.posZ != this.lastViewEntityZ || (double)viewEntity.rotationPitch != this.lastViewEntityPitch || (double)viewEntity.rotationYaw != this.lastViewEntityYaw;
+        // VIVE FIX CULLING ISSUES WITH MIRROR
+        this.displayListEntitiesDirty = true; //this.displayListEntitiesDirty || !this.chunksToUpdate.isEmpty() || viewEntity.posX != this.lastViewEntityX || viewEntity.posY != this.lastViewEntityY || viewEntity.posZ != this.lastViewEntityZ || (double)viewEntity.rotationPitch != this.lastViewEntityPitch || (double)viewEntity.rotationYaw != this.lastViewEntityYaw;
         this.lastViewEntityX = viewEntity.posX;
         this.lastViewEntityY = viewEntity.posY;
         this.lastViewEntityZ = viewEntity.posZ;
@@ -1208,8 +1219,11 @@
 
                 if (set1.size() == 1)
                 {
-                    Vector3f vector3f = this.getViewVector(viewEntity, partialTicks);
-                    EnumFacing enumfacing = EnumFacing.getFacingFromVector(vector3f.x, vector3f.y, vector3f.z).getOpposite();
+                	//VIVE
+                    //Vector3f vector3f = this.getViewVector(viewEntity, partialTicks);
+                	Vec3d dir = Minecraft.getMinecraft().roomScale.getHMDDir_World(); 
+                    EnumFacing enumfacing = EnumFacing.getFacingFromVector((float)dir.xCoord, (float)dir.yCoord, (float)dir.zCoord).getOpposite();
+                    //VIVE END
                     set1.remove(enumfacing);
                 }
 
@@ -1339,14 +1353,14 @@
                     BlockPos blockpos2 = renderchunk4.getPosition();
                     boolean flag4 = blockpos1.distanceSq((double)(blockpos2.getX() + 8), (double)(blockpos2.getY() + 8), (double)(blockpos2.getZ() + 8)) < 768.0D;
 
-                    if (!flag4)
+                    if ((Reflector.forgeExists() && (Boolean)Reflector.getFieldValue(Reflector.ForgeModContainer_alwaysSetupTerrainOffThread)) || (!renderchunk4.isNeedsUpdateCustom() && !flag4))
                     {
                         this.chunksToUpdate.add(renderchunk4);
                     }
-                    else if (!renderchunk4.isPlayerUpdate())
-                    {
-                        this.chunksToUpdateForced.add(renderchunk4);
-                    }
+                    //else if (!renderchunk4.isPlayerUpdate())
+                    //{
+                    //   this.chunksToUpdateForced.add(renderchunk4);
+                    //}
                     else
                     {
                         this.mc.mcProfiler.startSection("build near");
@@ -1452,22 +1466,22 @@
         }
     }
 
-    protected Vector3f getViewVector(Entity entityIn, double partialTicks)
-    {
-        float f = (float)((double)entityIn.prevRotationPitch + (double)(entityIn.rotationPitch - entityIn.prevRotationPitch) * partialTicks);
-        float f1 = (float)((double)entityIn.prevRotationYaw + (double)(entityIn.rotationYaw - entityIn.prevRotationYaw) * partialTicks);
-
-        if (Minecraft.getMinecraft().gameSettings.thirdPersonView == 2)
-        {
-            f += 180.0F;
-        }
-
-        float f2 = MathHelper.cos(-f1 * 0.017453292F - (float)Math.PI);
-        float f3 = MathHelper.sin(-f1 * 0.017453292F - (float)Math.PI);
-        float f4 = -MathHelper.cos(-f * 0.017453292F);
-        float f5 = MathHelper.sin(-f * 0.017453292F);
-        return new Vector3f(f3 * f4, f5, f2 * f4);
-    }
+//    protected Vector3f getViewVector(Entity entityIn, double partialTicks)
+//    {
+//        float f = (float)((double)entityIn.prevRotationPitch + (double)(entityIn.rotationPitch - entityIn.prevRotationPitch) * partialTicks);
+//        float f1 = (float)((double)entityIn.prevRotationYaw + (double)(entityIn.rotationYaw - entityIn.prevRotationYaw) * partialTicks);
+//
+//        if (Minecraft.getMinecraft().gameSettings.thirdPersonView == 2)
+//        {
+//            f += 180.0F;
+//        }
+//
+//        float f2 = MathHelper.cos(-f1 * 0.017453292F - (float)Math.PI);
+//        float f3 = MathHelper.sin(-f1 * 0.017453292F - (float)Math.PI);
+//        float f4 = -MathHelper.cos(-f * 0.017453292F);
+//        float f5 = MathHelper.sin(-f * 0.017453292F);
+//        return new Vector3f(f3 * f4, f5, f2 * f4);
+//    }
 
     public int renderBlockLayer(BlockRenderLayer blockLayerIn, double partialTicks, int pass, Entity entityIn)
     {
@@ -1486,14 +1500,13 @@
                 this.prevRenderSortY = entityIn.posY;
                 this.prevRenderSortZ = entityIn.posZ;
                 int k = 0;
-                this.chunksToResortTransparency.clear();
+                //this.chunksToResortTransparency.clear();
 
                 for (RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation : this.renderInfos)
                 {
                     if (renderglobal$containerlocalrenderinformation.renderChunk.compiledChunk.isLayerStarted(blockLayerIn) && k++ < 15)
                     {
-                        this.chunksToResortTransparency.add(renderglobal$containerlocalrenderinformation.renderChunk);
-                    }
+                       	this.renderDispatcher.updateTransparencyLater(renderglobal$containerlocalrenderinformation.renderChunk);                    }
                 }
             }
 
@@ -1717,7 +1730,7 @@
         if (Reflector.ForgeWorldProvider_getSkyRenderer.exists())
         {
             WorldProvider worldprovider = this.mc.world.provider;
-            Object object = Reflector.call(worldprovider, Reflector.ForgeWorldProvider_getSkyRenderer, new Object[0]);
+            Object object = Reflector.call(worldprovider, Reflector.ForgeWorldProvider_getSkyRenderer);
 
             if (object != null)
             {
@@ -1733,9 +1746,9 @@
         else if (this.mc.world.provider.isSurfaceWorld())
         {
             GlStateManager.disableTexture2D();
-            boolean flag = Config.isShaders();
+            boolean shadersmod = Config.isShaders();
 
-            if (flag)
+            if (shadersmod)
             {
                 Shaders.disableTexture2D();
             }
@@ -1743,7 +1756,7 @@
             Vec3d vec3d = this.world.getSkyColor(this.mc.getRenderViewEntity(), partialTicks);
             vec3d = CustomColors.getSkyColor(vec3d, this.mc.world, this.mc.getRenderViewEntity().posX, this.mc.getRenderViewEntity().posY + 1.0D, this.mc.getRenderViewEntity().posZ);
 
-            if (flag)
+            if (shadersmod)
             {
                 Shaders.setSkyColor(vec3d);
             }
@@ -1768,14 +1781,14 @@
             GlStateManager.depthMask(false);
             GlStateManager.enableFog();
 
-            if (flag)
+            if (shadersmod)
             {
                 Shaders.enableFog();
             }
 
             GlStateManager.color(f, f1, f2);
 
-            if (flag)
+            if (shadersmod)
             {
                 Shaders.preSkyList();
             }
@@ -1799,7 +1812,7 @@
 
             GlStateManager.disableFog();
 
-            if (flag)
+            if (shadersmod)
             {
                 Shaders.disableFog();
             }
@@ -1814,7 +1827,7 @@
             {
                 GlStateManager.disableTexture2D();
 
-                if (flag)
+                if (shadersmod)
                 {
                     Shaders.disableTexture2D();
                 }
@@ -1857,7 +1870,7 @@
 
             GlStateManager.enableTexture2D();
 
-            if (flag)
+            if (shadersmod)
             {
                 Shaders.enableTexture2D();
             }
@@ -1869,14 +1882,14 @@
             GlStateManager.rotate(-90.0F, 0.0F, 1.0F, 0.0F);
             CustomSky.renderSky(this.world, this.renderEngine, partialTicks);
 
-            if (flag)
+            if (shadersmod)
             {
                 Shaders.preCelestialRotate();
             }
 
             GlStateManager.rotate(this.world.getCelestialAngle(partialTicks) * 360.0F, 1.0F, 0.0F, 0.0F);
 
-            if (flag)
+            if (shadersmod)
             {
                 Shaders.postCelestialRotate();
             }
@@ -1916,7 +1929,7 @@
 
             GlStateManager.disableTexture2D();
 
-            if (flag)
+            if (shadersmod)
             {
                 Shaders.disableTexture2D();
             }
@@ -1947,7 +1960,7 @@
             GlStateManager.enableAlpha();
             GlStateManager.enableFog();
 
-            if (flag)
+            if (shadersmod)
             {
                 Shaders.enableFog();
             }
@@ -1955,7 +1968,7 @@
             GlStateManager.popMatrix();
             GlStateManager.disableTexture2D();
 
-            if (flag)
+            if (shadersmod)
             {
                 Shaders.disableTexture2D();
             }
@@ -2035,7 +2048,7 @@
             GlStateManager.popMatrix();
             GlStateManager.enableTexture2D();
 
-            if (flag)
+            if (shadersmod)
             {
                 Shaders.enableTexture2D();
             }
@@ -2051,7 +2064,7 @@
             if (Reflector.ForgeWorldProvider_getCloudRenderer.exists())
             {
                 WorldProvider worldprovider = this.mc.world.provider;
-                Object object = Reflector.call(worldprovider, Reflector.ForgeWorldProvider_getCloudRenderer, new Object[0]);
+                Object object = Reflector.call(worldprovider, Reflector.ForgeWorldProvider_getCloudRenderer);
 
                 if (object != null)
                 {
@@ -2322,9 +2335,10 @@
 
     public void updateChunks(long finishTimeNano)
     {
-        finishTimeNano = (long)((double)finishTimeNano + 1.0E8D);
+        //finishTimeNano = (long)((double)finishTimeNano + 1.0E8D);
         this.displayListEntitiesDirty |= this.renderDispatcher.runChunkUploads(finishTimeNano);
 
+        /*
         if (this.chunksToUpdateForced.size() > 0)
         {
             Iterator iterator = this.chunksToUpdateForced.iterator();
@@ -2359,10 +2373,11 @@
                 }
             }
         }
-
-        int j = 0;
+*/
+        
+        //int j = 0;
         int k = Config.getUpdatesPerFrame();
-        int i = k * 2;
+        //int i = k * 2;
 
         if (!this.chunksToUpdate.isEmpty())
         {
@@ -2389,8 +2404,14 @@
 
                 renderchunk1.clearNeedsUpdate();
                 iterator1.remove();
+                
+                long i = finishTimeNano - System.nanoTime();
+                if (i < 0L)
+                {
+                	break;
+                }
 
-                if (renderchunk1.getCompiledChunk().isEmpty() && k < i)
+                /*if (renderchunk1.getCompiledChunk().isEmpty() && k < i)
                 {
                     ++k;
                 }
@@ -2401,6 +2422,7 @@
                 {
                     break;
                 }
+                */
             }
         }
     }
@@ -2591,7 +2613,7 @@
 
                         if (tileentity != null)
                         {
-                            flag1 = Reflector.callBoolean(tileentity, Reflector.ForgeTileEntity_canRenderBreaking, new Object[0]);
+                            flag1 = Reflector.callBoolean(tileentity, Reflector.ForgeTileEntity_canRenderBreaking);
                         }
                     }
 
@@ -3090,6 +3112,8 @@
     public void playEvent(EntityPlayer player, int type, BlockPos blockPosIn, int data)
     {
         Random random = this.world.rand;
+        
+        boolean playernear =  mc.player !=null && !mc.player.isDead && (mc.player.getPosition().distanceSq(blockPosIn) < 25); ///hmm sure why not.
 
         switch (type)
         {
@@ -3146,18 +3170,30 @@
                 break;
 
             case 1011:
+                if(playernear)
+                	MCOpenVR.triggerHapticPulse(0,250); //VIVECRAFT go thump.
+
                 this.world.playSound(blockPosIn, SoundEvents.BLOCK_IRON_DOOR_CLOSE, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false);
                 break;
 
             case 1012:
+                if(playernear)
+                	MCOpenVR.triggerHapticPulse(0,250); //VIVECRAFT go thump.
+
                 this.world.playSound(blockPosIn, SoundEvents.BLOCK_WOODEN_DOOR_CLOSE, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false);
                 break;
 
             case 1013:
+                if(playernear)
+                	MCOpenVR.triggerHapticPulse(0,250); //VIVECRAFT go thump.
+
                 this.world.playSound(blockPosIn, SoundEvents.BLOCK_WOODEN_TRAPDOOR_CLOSE, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false);
                 break;
 
             case 1014:
+                if(playernear)
+                	MCOpenVR.triggerHapticPulse(0,250); //VIVECRAFT go thump.
+
                 this.world.playSound(blockPosIn, SoundEvents.BLOCK_FENCE_GATE_CLOSE, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false);
                 break;
 
@@ -3178,14 +3214,26 @@
                 break;
 
             case 1019:
+                if(playernear){ //this is just mean.
+                	MCOpenVR.triggerHapticPulse(0,750); 
+                	MCOpenVR.triggerHapticPulse(1,750); 
+                }
                 this.world.playSound(blockPosIn, SoundEvents.ENTITY_ZOMBIE_ATTACK_DOOR_WOOD, SoundCategory.HOSTILE, 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
                 break;
 
             case 1020:
+                if(playernear){ //this is just mean.
+                	MCOpenVR.triggerHapticPulse(0,750); 
+                	MCOpenVR.triggerHapticPulse(1,750); 
+                }
                 this.world.playSound(blockPosIn, SoundEvents.ENTITY_ZOMBIE_ATTACK_IRON_DOOR, SoundCategory.HOSTILE, 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
                 break;
 
             case 1021:
+                if(playernear){ //this is just mean.
+                	MCOpenVR.triggerHapticPulse(0,1250); 
+                	MCOpenVR.triggerHapticPulse(1,1250); 
+                }
                 this.world.playSound(blockPosIn, SoundEvents.ENTITY_ZOMBIE_BREAK_DOOR_WOOD, SoundCategory.HOSTILE, 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
                 break;
 
@@ -3214,10 +3262,17 @@
                 break;
 
             case 1030:
+                if(playernear){ 
+                	MCOpenVR.triggerHapticPulse(0,500); 
+                }
                 this.world.playSound(blockPosIn, SoundEvents.BLOCK_ANVIL_USE, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false);
                 break;
 
             case 1031:
+                if(playernear){ 
+                	MCOpenVR.triggerHapticPulse(0,1250); 
+                	MCOpenVR.triggerHapticPulse(1,1250); 
+                }
                 this.world.playSound(blockPosIn, SoundEvents.BLOCK_ANVIL_LAND, SoundCategory.BLOCKS, 0.3F, this.world.rand.nextFloat() * 0.1F + 0.9F, false);
                 break;
 
@@ -3238,6 +3293,9 @@
                 break;
 
             case 1036:
+                if(playernear)
+                	MCOpenVR.triggerHapticPulse(0,250); //VIVECRAFT go thump.
+
                 this.world.playSound(blockPosIn, SoundEvents.BLOCK_IRON_TRAPDOOR_CLOSE, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false);
                 break;
 
@@ -3277,6 +3335,9 @@
                     {
                         soundtype = (SoundType)Reflector.call(block, Reflector.ForgeBlock_getSoundType, new Object[] {Block.getStateById(data), this.world, blockPosIn, null});
                     }
+                    
+                    if(playernear)
+                    	MCOpenVR.triggerHapticPulse(0,250); //VIVECRAFT go thump.
 
                     this.world.playSound(blockPosIn, soundtype.getBreakSound(), SoundCategory.BLOCKS, (soundtype.getVolume() + 1.0F) / 2.0F, soundtype.getPitch() * 0.8F, false);
                 }
