--- a/net/minecraft/client/renderer/entity/RenderManager.java
+++ b/net/minecraft/client/renderer/entity/RenderManager.java
@@ -1,6 +1,8 @@
 package net.minecraft.client.renderer.entity;
 
 import com.google.common.collect.Maps;
+import com.mtbs3d.minecrift.render.PlayerModelController;
+
 import java.util.Collections;
 import java.util.Map;
 import javax.annotation.Nullable;
@@ -153,6 +155,8 @@
     public Entity renderEntity = null;
     public Render renderRender = null;
 
+    RenderPlayerVR n;
+    
     public RenderManager(TextureManager renderEngineIn, RenderItem itemRendererIn)
     {
         this.renderEngine = renderEngineIn;
@@ -270,16 +274,22 @@
     @Nullable
     public <T extends Entity> Render<T> getEntityRenderObject(T entityIn)
     {
-        if (entityIn instanceof AbstractClientPlayer)
-        {
-            String s = ((AbstractClientPlayer)entityIn).getSkinType();
-            RenderPlayer renderplayer = (RenderPlayer)this.skinMap.get(s);
-            return (Render<T>) (renderplayer != null ? renderplayer : this.playerRenderer);
-        }
-        else
-        {
-            return this.<T>getEntityClassRenderObject(entityIn.getClass());
-        }
+    	if (entityIn instanceof AbstractClientPlayer)
+    	{
+    		String s = ((AbstractClientPlayer)entityIn).getSkinType();
+    		RenderPlayer renderplayer = (RenderPlayer)this.skinMap.get(s);
+
+    		if(PlayerModelController.getInstance().isTracked(((AbstractClientPlayer) entityIn).getGameProfile().getId()))
+    		{
+    			if(n==null) n = new RenderPlayerVR(this);
+    			return (Render<T>) n;            	
+    		}  else 
+    			return (Render<T>) (renderplayer != null ? renderplayer : this.playerRenderer);
+    	}      
+    	else
+    	{
+    		return this.<T>getEntityClassRenderObject(entityIn.getClass());
+    	}
     }
 
     public void cacheActiveRenderInfo(World worldIn, FontRenderer textRendererIn, Entity livingPlayerIn, Entity pointedEntityIn, GameSettings optionsIn, float partialTicks)
@@ -572,8 +582,10 @@
         return this.entityRenderMap;
     }
 
+    //Forge
     public Map<String, RenderPlayer> getSkinMap()
     {
         return Collections.<String, RenderPlayer>unmodifiableMap(this.skinMap);
     }
+    ///
 }
